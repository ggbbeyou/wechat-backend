// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	friendshipsFieldNames          = builder.RawFieldNames(&Friendships{})
	friendshipsRows                = strings.Join(friendshipsFieldNames, ",")
	friendshipsRowsExpectAutoSet   = strings.Join(stringx.Remove(friendshipsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	friendshipsRowsWithPlaceHolder = strings.Join(stringx.Remove(friendshipsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	friendshipsModel interface {
		Insert(ctx context.Context, data *Friendships) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Friendships, error)
		Update(ctx context.Context, data *Friendships) error
		Delete(ctx context.Context, id int64) error
		SelectFriendList(ctx context.Context, uid int64) ([]*UserDetail, error)
	}

	defaultFriendshipsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Friendships struct {
		Id         int64        `db:"id"`          // id 雪花算法
		Uid1       int64        `db:"uid1"`        // 用户1 uid
		Uid2       int64        `db:"uid2"`        // 用户2 uid
		CreateTime sql.NullTime `db:"create_time"` // 加好友时间
		IsDalete   uint64       `db:"is_dalete"`   // 逻辑删除 1 删除
	}
)

func newFriendshipsModel(conn sqlx.SqlConn) *defaultFriendshipsModel {
	return &defaultFriendshipsModel{
		conn:  conn,
		table: "`friendships`",
	}
}

func (m *defaultFriendshipsModel) SelectFriendList(ctx context.Context, uid int64) ([]*UserDetail, error) {
	query := fmt.Sprintf("select u.username,u.nickname,u.age,u.avatar,u.email,u.introduce,u.last_time,u.last_address "+
		"from %s as f join `users` as u on f.uid2 = u.uid where f.uid1 = ? ", m.table)
	var resp []*UserDetail
	err := m.conn.QueryRows(&resp, query, uid)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendshipsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFriendshipsModel) FindOne(ctx context.Context, id int64) (*Friendships, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", friendshipsRows, m.table)
	var resp Friendships
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendshipsModel) Insert(ctx context.Context, data *Friendships) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, friendshipsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid1, data.Uid2, data.IsDalete)
	return ret, err
}

func (m *defaultFriendshipsModel) Update(ctx context.Context, data *Friendships) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, friendshipsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid1, data.Uid2, data.IsDalete, data.Id)
	return err
}

func (m *defaultFriendshipsModel) tableName() string {
	return m.table
}
