// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupsFieldNames          = builder.RawFieldNames(&Groups{})
	groupsRows                = strings.Join(groupsFieldNames, ",")
	groupsRowsExpectAutoSet   = strings.Join(stringx.Remove(groupsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	groupsRowsWithPlaceHolder = strings.Join(stringx.Remove(groupsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	groupsModel interface {
		Insert(ctx context.Context, data *Groups) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Groups, error)
		Update(ctx context.Context, data *Groups) error
		Delete(ctx context.Context, id int64) error
		SelectGroupList(ctx context.Context, uid int64) ([]*GroupDetail, error)
		SelectOne(ctx context.Context, gid int64) (*Groups, error)
	}

	defaultGroupsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Groups struct {
		Id         int64          `db:"id"`          // id
		Gid        int64          `db:"gid"`         // 群聊id 雪花算法
		Uid        int64          `db:"uid"`         // 用户id 创建者
		Gname      string         `db:"gname"`       // 群聊名称
		Avatar     sql.NullString `db:"avatar"`      // 群聊头像
		Count      uint64         `db:"count"`       // 人数 通过触发器维护
		CreateTime sql.NullTime   `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime   `db:"update_time"` // 更新时间
	}
)

func newGroupsModel(conn sqlx.SqlConn) *defaultGroupsModel {
	return &defaultGroupsModel{
		conn:  conn,
		table: "`groups`",
	}
}

func (m *defaultGroupsModel) SelectGroupList(ctx context.Context, uid int64) ([]*GroupDetail, error) {
	query := fmt.Sprintf("select g.gid,g.uid,g.gname, g.avatar,g.count,g.create_time from %s as g where gid in (select gid from `groupfriends` where `uid` = ?)", m.table)
	var resp []*GroupDetail
	err := m.conn.QueryRowsCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultGroupsModel) SelectOne(ctx context.Context, gid int64) (*Groups, error) {
	query := fmt.Sprintf("select %s from %s where `gid` = ? limit 1", groupsRows, m.table)
	var resp Groups
	err := m.conn.QueryRowCtx(ctx, &resp, query, gid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultGroupsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGroupsModel) FindOne(ctx context.Context, id int64) (*Groups, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupsRows, m.table)
	var resp Groups
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupsModel) Insert(ctx context.Context, data *Groups) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, groupsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Gid, data.Uid, data.Gname, data.Avatar, data.Count)
	return ret, err
}

func (m *defaultGroupsModel) Update(ctx context.Context, data *Groups) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, groupsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Gid, data.Uid, data.Gname, data.Avatar, data.Count, data.Id)
	return err
}

func (m *defaultGroupsModel) tableName() string {
	return m.table
}
