// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersFieldNames          = builder.RawFieldNames(&Users{})
	usersRows                = strings.Join(usersFieldNames, ",")
	usersRowsExpectAutoSet   = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	usersRowsWithPlaceHolder = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	usersModel interface {
		Insert(ctx context.Context, data *Users) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Users, error)
		FindOneByUid(ctx context.Context, uid int64) (*UsersInfo, error)
		FindOneByUsername(ctx context.Context, username string) (*UsersInfo, error)
		Update(ctx context.Context, data *Users) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Users struct {
		Id          int64          `db:"id"`       // 主键id
		Password    string         `db:"password"` // 密码 32位加密
		Uid         int64          `db:"uid"`      // 用户id 雪花算法
		Username    string         `db:"username"` // 用户名
		Nickname    sql.NullString `db:"nickname"` // 昵称
		Age         sql.NullInt64  `db:"age"`      // 年龄
		Avatar      sql.NullString `db:"avatar"`   // 头像地址
		Introduce   sql.NullString `db:"introduce"`
		Email       sql.NullString `db:"email"`        // 邮箱
		State       uint64         `db:"state"`        // 0正常 1=禁用
		IsDelete    uint64         `db:"is_delete"`    // 逻辑删除
		CreateTime  sql.NullTime   `db:"create_time"`  // 创建时间
		UpdateTime  sql.NullTime   `db:"update_time"`  // 更新信息时间
		LastTime    sql.NullTime   `db:"last_time"`    // 上次登陆时间
		LastAddress sql.NullString `db:"last_address"` // 上次登录地址
	}
)

func newUsersModel(conn sqlx.SqlConn) *defaultUsersModel {
	return &defaultUsersModel{
		conn:  conn,
		table: "`users`",
	}
}

func (m *defaultUsersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersRows, m.table)
	var resp Users
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByUid(ctx context.Context, uid int64) (*UsersInfo, error) {
	var resp UsersInfo
	query := fmt.Sprintf("select %s from %s where `uid` = ? limit 1", usersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByUsername(ctx context.Context, username string) (*UsersInfo, error) {
	var resp UsersInfo
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", usersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, data *Users) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, usersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Username, data.Password, data.Nickname, data.Age, data.Avatar, data.Introduce, data.Email, data.State, data.IsDelete, data.LastTime, data.LastAddress)
	return ret, err
}

func (m *defaultUsersModel) Update(ctx context.Context, newData *Users) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Uid, newData.Username, newData.Password, newData.Nickname, newData.Age, newData.Avatar, newData.Introduce, newData.Email, newData.State, newData.IsDelete, newData.LastTime, newData.LastAddress, newData.Id)
	return err
}

func (m *defaultUsersModel) tableName() string {
	return m.table
}
