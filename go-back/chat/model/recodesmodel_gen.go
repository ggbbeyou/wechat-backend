// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	recodesFieldNames          = builder.RawFieldNames(&Recodes{})
	recodesRows                = strings.Join(recodesFieldNames, ",")
	recodesRowsExpectAutoSet   = strings.Join(stringx.Remove(recodesFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	recodesRowsWithPlaceHolder = strings.Join(stringx.Remove(recodesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	recodesModel interface {
		Insert(ctx context.Context, data *Recodes) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Recodes, error)
		Update(ctx context.Context, data *Recodes) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRecodesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Recodes struct {
		Id       int64          `db:"id"`        // 主键
		Content  sql.NullString `db:"content"`   // 消息内容
		From     sql.NullInt64  `db:"from"`      // 发送用户id
		To       sql.NullInt64  `db:"to"`        // 接受用户id
		Type     int64          `db:"type"`      // 消息类型 1用户消息
		SendTime sql.NullTime   `db:"send_time"` // 发送时间
	}
)

func newRecodesModel(conn sqlx.SqlConn) *defaultRecodesModel {
	return &defaultRecodesModel{
		conn:  conn,
		table: "`recodes`",
	}
}

func (m *defaultRecodesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRecodesModel) FindOne(ctx context.Context, id int64) (*Recodes, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", recodesRows, m.table)
	var resp Recodes
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRecodesModel) Insert(ctx context.Context, data *Recodes) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, recodesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Content, data.From, data.To, data.Type, data.SendTime)
	return ret, err
}

func (m *defaultRecodesModel) Update(ctx context.Context, data *Recodes) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, recodesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Content, data.From, data.To, data.Type, data.SendTime, data.Id)
	return err
}

func (m *defaultRecodesModel) tableName() string {
	return m.table
}
